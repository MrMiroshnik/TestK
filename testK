import requests
import json
import bankexchange

headers = {
    "accept": "*/*",
    "user-agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/537.36"
}

def get_url(url:str):
    s = requests.Session()
    
    if url.find("/en/share/") == -1:
        index = url.index("/share/")
        url = url[:index - 2] + "en" + url[index:]
    
    try: 
        response = s.get(url=url, headers=headers)
    except:
        return ""
    
    if response.status_code != 200:
        return ""

    index = response.url.index(".html?")
    
    url = response.url[0:index + 6]
    
    index = response.url.index("v1=")
    
    url = url + response.url[index:]
        
    return url
            
def collect_data(url):
    if url.find("/share/") > 0:
        url = get_url(url)
    
        if not url:
            with open("result_data.json", "w", encoding='utf8') as file:
                json.dump([], file, indent=4, ensure_ascii=False)
                           
            return
        
    s = requests.Session()

    CountriesForSearch = ["es", "pl", "pt", "fr", "de", "uk", "it"]
    
    lst_url = url.split("/")  

    url_temp = f"https://www.zara.com/CountriesForSearch/en/{lst_url[len(lst_url) - 1]}&ajax=true"

    result_data = []
    
    exchange = bankexchange.exchange_data()

    for el in CountriesForSearch: 
        if not exchange:
            exchange_kof = 0
        elif el == "uk":
            exchange_kof = exchange['uk'] 
        elif el == "pl":
            exchange_kof = exchange['pl']  
        else:
             exchange_kof = exchange['es']  
                       
        url_req = url_temp.replace("CountriesForSearch", el)
        
        try: 
            url_shop = f"{lst_url[0]}//{lst_url[2]}/{el}/en/{lst_url[5]}"
            
            response = s.get(url=url_req, headers=headers)
        except:
            continue
        
        if response.status_code != 200:
            continue
        
        data = response.json()
                
        analyticsData = data.get("analyticsData")
        page = analyticsData.get("page")
        colors = data.get("product").get("detail").get("colors")
        
        size_str = ""
        for color in colors:
            sizes = color.get("sizes")
            Availability = ""
            coming_soon = ""
            
            for size in sizes:
                availability_str = size.get("availability")
                
                if availability_str == "out_of_stock":
                    continue
                elif availability_str == 'coming_soon':
                    coming_soon = coming_soon + f"{size.get("name")} "
                else:             
                    Availability = Availability + f"{size.get("name")} "
                               
            if Availability or coming_soon:
                if coming_soon:
                    size_str = size_str + color.get("name") + f" - ({Availability.strip().replace(" ", ",")})" + f" (очікується - {coming_soon.strip().replace(" ", ",")})"
                else:
                    size_str = size_str + color.get("name") + f" - ({Availability.strip().replace(" ", ",")})"    
            else:
                size_str = ""    
                
        result_data.append(
                        {
                            "title": analyticsData.get("productName"),
                            "link": url_shop,
                            "shop": page.get("shop"),
                            "mainPrice": analyticsData.get("mainPrice"),
                            "currency": page.get("currency"),
                            "uahPrice": round(float(analyticsData.get("mainPrice")) * float(exchange_kof), 2) if exchange_kof != 0 else "Помилка отримання курсу валют.",
                            "Availability": size_str
                        }
                    )

    with open("result_data.json", "w", encoding='utf8') as file:
        json.dump(result_data, file, indent=4, ensure_ascii=False)

def main():
    pass

if __name__ == "__main__":
    main()
